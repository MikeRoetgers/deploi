// Code generated by protoc-gen-go.
// source: server.proto
// DO NOT EDIT!

/*
Package protobuf is a generated protocol buffer package.

It is generated from these files:
	server.proto

It has these top-level messages:
	Job
	Environment
	RegisterEnvironmentRequest
	GetEnvironmentResponse
	DeleteEnvironmentRequest
	DeployRequest
	DeployResponse
	AutomationRequest
	AutomationResponse
	GetProjectsResponse
	GetBuildsRequest
	GetBuildsResponse
	NewBuildRequest
	NextJobRequest
	NextJobResponse
	JobDoneRequest
	Build
	Project
	StandardRequest
	StandardResponse
	RequestHeader
	ResponseHeader
	Error
*/
package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Job struct {
	Id          string       `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Environment *Environment `protobuf:"bytes,2,opt,name=environment" json:"environment,omitempty"`
	Build       *Build       `protobuf:"bytes,3,opt,name=build" json:"build,omitempty"`
	CreatedAt   int64        `protobuf:"varint,4,opt,name=createdAt" json:"createdAt,omitempty"`
	FinishedAt  int64        `protobuf:"varint,5,opt,name=finishedAt" json:"finishedAt,omitempty"`
}

func (m *Job) Reset()                    { *m = Job{} }
func (m *Job) String() string            { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()               {}
func (*Job) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Job) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Job) GetEnvironment() *Environment {
	if m != nil {
		return m.Environment
	}
	return nil
}

func (m *Job) GetBuild() *Build {
	if m != nil {
		return m.Build
	}
	return nil
}

func (m *Job) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Job) GetFinishedAt() int64 {
	if m != nil {
		return m.FinishedAt
	}
	return 0
}

type Environment struct {
	Name       string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Namespaces []string `protobuf:"bytes,2,rep,name=namespaces" json:"namespaces,omitempty"`
}

func (m *Environment) Reset()                    { *m = Environment{} }
func (m *Environment) String() string            { return proto.CompactTextString(m) }
func (*Environment) ProtoMessage()               {}
func (*Environment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Environment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Environment) GetNamespaces() []string {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

type RegisterEnvironmentRequest struct {
	Header      *RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Environment *Environment   `protobuf:"bytes,2,opt,name=environment" json:"environment,omitempty"`
}

func (m *RegisterEnvironmentRequest) Reset()                    { *m = RegisterEnvironmentRequest{} }
func (m *RegisterEnvironmentRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterEnvironmentRequest) ProtoMessage()               {}
func (*RegisterEnvironmentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RegisterEnvironmentRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *RegisterEnvironmentRequest) GetEnvironment() *Environment {
	if m != nil {
		return m.Environment
	}
	return nil
}

type GetEnvironmentResponse struct {
	Header       *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Environments []*Environment  `protobuf:"bytes,2,rep,name=environments" json:"environments,omitempty"`
}

func (m *GetEnvironmentResponse) Reset()                    { *m = GetEnvironmentResponse{} }
func (m *GetEnvironmentResponse) String() string            { return proto.CompactTextString(m) }
func (*GetEnvironmentResponse) ProtoMessage()               {}
func (*GetEnvironmentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetEnvironmentResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetEnvironmentResponse) GetEnvironments() []*Environment {
	if m != nil {
		return m.Environments
	}
	return nil
}

type DeleteEnvironmentRequest struct {
	Header      *RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Environment *Environment   `protobuf:"bytes,2,opt,name=environment" json:"environment,omitempty"`
}

func (m *DeleteEnvironmentRequest) Reset()                    { *m = DeleteEnvironmentRequest{} }
func (m *DeleteEnvironmentRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteEnvironmentRequest) ProtoMessage()               {}
func (*DeleteEnvironmentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DeleteEnvironmentRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DeleteEnvironmentRequest) GetEnvironment() *Environment {
	if m != nil {
		return m.Environment
	}
	return nil
}

type DeployRequest struct {
	Header      *RequestHeader    `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Project     string            `protobuf:"bytes,2,opt,name=project" json:"project,omitempty"`
	BuildId     string            `protobuf:"bytes,3,opt,name=buildId" json:"buildId,omitempty"`
	Environment string            `protobuf:"bytes,4,opt,name=environment" json:"environment,omitempty"`
	Namespace   string            `protobuf:"bytes,5,opt,name=namespace" json:"namespace,omitempty"`
	Files       map[string]string `protobuf:"bytes,6,rep,name=files" json:"files,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *DeployRequest) Reset()                    { *m = DeployRequest{} }
func (m *DeployRequest) String() string            { return proto.CompactTextString(m) }
func (*DeployRequest) ProtoMessage()               {}
func (*DeployRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DeployRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DeployRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *DeployRequest) GetBuildId() string {
	if m != nil {
		return m.BuildId
	}
	return ""
}

func (m *DeployRequest) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *DeployRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DeployRequest) GetFiles() map[string]string {
	if m != nil {
		return m.Files
	}
	return nil
}

type DeployResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	JobId  string          `protobuf:"bytes,2,opt,name=jobId" json:"jobId,omitempty"`
}

func (m *DeployResponse) Reset()                    { *m = DeployResponse{} }
func (m *DeployResponse) String() string            { return proto.CompactTextString(m) }
func (*DeployResponse) ProtoMessage()               {}
func (*DeployResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DeployResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DeployResponse) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

type AutomationRequest struct {
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *AutomationRequest) Reset()                    { *m = AutomationRequest{} }
func (m *AutomationRequest) String() string            { return proto.CompactTextString(m) }
func (*AutomationRequest) ProtoMessage()               {}
func (*AutomationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AutomationRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type AutomationResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *AutomationResponse) Reset()                    { *m = AutomationResponse{} }
func (m *AutomationResponse) String() string            { return proto.CompactTextString(m) }
func (*AutomationResponse) ProtoMessage()               {}
func (*AutomationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *AutomationResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type GetProjectsResponse struct {
	Header   *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Projects []string        `protobuf:"bytes,2,rep,name=projects" json:"projects,omitempty"`
}

func (m *GetProjectsResponse) Reset()                    { *m = GetProjectsResponse{} }
func (m *GetProjectsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetProjectsResponse) ProtoMessage()               {}
func (*GetProjectsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetProjectsResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetProjectsResponse) GetProjects() []string {
	if m != nil {
		return m.Projects
	}
	return nil
}

type GetBuildsRequest struct {
	Header      *RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ProjectName string         `protobuf:"bytes,2,opt,name=projectName" json:"projectName,omitempty"`
}

func (m *GetBuildsRequest) Reset()                    { *m = GetBuildsRequest{} }
func (m *GetBuildsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBuildsRequest) ProtoMessage()               {}
func (*GetBuildsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GetBuildsRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetBuildsRequest) GetProjectName() string {
	if m != nil {
		return m.ProjectName
	}
	return ""
}

type GetBuildsResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Builds []*Build        `protobuf:"bytes,2,rep,name=builds" json:"builds,omitempty"`
}

func (m *GetBuildsResponse) Reset()                    { *m = GetBuildsResponse{} }
func (m *GetBuildsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetBuildsResponse) ProtoMessage()               {}
func (*GetBuildsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetBuildsResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetBuildsResponse) GetBuilds() []*Build {
	if m != nil {
		return m.Builds
	}
	return nil
}

type NewBuildRequest struct {
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Build  *Build         `protobuf:"bytes,2,opt,name=build" json:"build,omitempty"`
}

func (m *NewBuildRequest) Reset()                    { *m = NewBuildRequest{} }
func (m *NewBuildRequest) String() string            { return proto.CompactTextString(m) }
func (*NewBuildRequest) ProtoMessage()               {}
func (*NewBuildRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *NewBuildRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *NewBuildRequest) GetBuild() *Build {
	if m != nil {
		return m.Build
	}
	return nil
}

type NextJobRequest struct {
	Header      *RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Environment string         `protobuf:"bytes,2,opt,name=environment" json:"environment,omitempty"`
}

func (m *NextJobRequest) Reset()                    { *m = NextJobRequest{} }
func (m *NextJobRequest) String() string            { return proto.CompactTextString(m) }
func (*NextJobRequest) ProtoMessage()               {}
func (*NextJobRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *NextJobRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *NextJobRequest) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

type NextJobResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Jobs   []*Job          `protobuf:"bytes,2,rep,name=jobs" json:"jobs,omitempty"`
}

func (m *NextJobResponse) Reset()                    { *m = NextJobResponse{} }
func (m *NextJobResponse) String() string            { return proto.CompactTextString(m) }
func (*NextJobResponse) ProtoMessage()               {}
func (*NextJobResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *NextJobResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *NextJobResponse) GetJobs() []*Job {
	if m != nil {
		return m.Jobs
	}
	return nil
}

type JobDoneRequest struct {
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	JobId  string         `protobuf:"bytes,2,opt,name=jobId" json:"jobId,omitempty"`
}

func (m *JobDoneRequest) Reset()                    { *m = JobDoneRequest{} }
func (m *JobDoneRequest) String() string            { return proto.CompactTextString(m) }
func (*JobDoneRequest) ProtoMessage()               {}
func (*JobDoneRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *JobDoneRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *JobDoneRequest) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

type Build struct {
	ProjectName    string            `protobuf:"bytes,1,opt,name=projectName" json:"projectName,omitempty"`
	BuildId        string            `protobuf:"bytes,2,opt,name=buildId" json:"buildId,omitempty"`
	BuildURL       string            `protobuf:"bytes,3,opt,name=buildURL" json:"buildURL,omitempty"`
	BuildSystemURL string            `protobuf:"bytes,4,opt,name=buildSystemURL" json:"buildSystemURL,omitempty"`
	BranchName     string            `protobuf:"bytes,5,opt,name=branchName" json:"branchName,omitempty"`
	CreatedAt      int64             `protobuf:"varint,6,opt,name=createdAt" json:"createdAt,omitempty"`
	Files          map[string]string `protobuf:"bytes,7,rep,name=files" json:"files,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Build) Reset()                    { *m = Build{} }
func (m *Build) String() string            { return proto.CompactTextString(m) }
func (*Build) ProtoMessage()               {}
func (*Build) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *Build) GetProjectName() string {
	if m != nil {
		return m.ProjectName
	}
	return ""
}

func (m *Build) GetBuildId() string {
	if m != nil {
		return m.BuildId
	}
	return ""
}

func (m *Build) GetBuildURL() string {
	if m != nil {
		return m.BuildURL
	}
	return ""
}

func (m *Build) GetBuildSystemURL() string {
	if m != nil {
		return m.BuildSystemURL
	}
	return ""
}

func (m *Build) GetBranchName() string {
	if m != nil {
		return m.BranchName
	}
	return ""
}

func (m *Build) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Build) GetFiles() map[string]string {
	if m != nil {
		return m.Files
	}
	return nil
}

type Project struct {
	ProjectName string   `protobuf:"bytes,1,opt,name=projectName" json:"projectName,omitempty"`
	Builds      []*Build `protobuf:"bytes,2,rep,name=builds" json:"builds,omitempty"`
}

func (m *Project) Reset()                    { *m = Project{} }
func (m *Project) String() string            { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()               {}
func (*Project) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Project) GetProjectName() string {
	if m != nil {
		return m.ProjectName
	}
	return ""
}

func (m *Project) GetBuilds() []*Build {
	if m != nil {
		return m.Builds
	}
	return nil
}

type StandardRequest struct {
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *StandardRequest) Reset()                    { *m = StandardRequest{} }
func (m *StandardRequest) String() string            { return proto.CompactTextString(m) }
func (*StandardRequest) ProtoMessage()               {}
func (*StandardRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *StandardRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type StandardResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *StandardResponse) Reset()                    { *m = StandardResponse{} }
func (m *StandardResponse) String() string            { return proto.CompactTextString(m) }
func (*StandardResponse) ProtoMessage()               {}
func (*StandardResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *StandardResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type RequestHeader struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *RequestHeader) Reset()                    { *m = RequestHeader{} }
func (m *RequestHeader) String() string            { return proto.CompactTextString(m) }
func (*RequestHeader) ProtoMessage()               {}
func (*RequestHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *RequestHeader) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type ResponseHeader struct {
	Success bool     `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Errors  []*Error `protobuf:"bytes,2,rep,name=errors" json:"errors,omitempty"`
}

func (m *ResponseHeader) Reset()                    { *m = ResponseHeader{} }
func (m *ResponseHeader) String() string            { return proto.CompactTextString(m) }
func (*ResponseHeader) ProtoMessage()               {}
func (*ResponseHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *ResponseHeader) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ResponseHeader) GetErrors() []*Error {
	if m != nil {
		return m.Errors
	}
	return nil
}

type Error struct {
	Code    string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *Error) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Job)(nil), "protobuf.Job")
	proto.RegisterType((*Environment)(nil), "protobuf.Environment")
	proto.RegisterType((*RegisterEnvironmentRequest)(nil), "protobuf.RegisterEnvironmentRequest")
	proto.RegisterType((*GetEnvironmentResponse)(nil), "protobuf.GetEnvironmentResponse")
	proto.RegisterType((*DeleteEnvironmentRequest)(nil), "protobuf.DeleteEnvironmentRequest")
	proto.RegisterType((*DeployRequest)(nil), "protobuf.DeployRequest")
	proto.RegisterType((*DeployResponse)(nil), "protobuf.DeployResponse")
	proto.RegisterType((*AutomationRequest)(nil), "protobuf.AutomationRequest")
	proto.RegisterType((*AutomationResponse)(nil), "protobuf.AutomationResponse")
	proto.RegisterType((*GetProjectsResponse)(nil), "protobuf.GetProjectsResponse")
	proto.RegisterType((*GetBuildsRequest)(nil), "protobuf.GetBuildsRequest")
	proto.RegisterType((*GetBuildsResponse)(nil), "protobuf.GetBuildsResponse")
	proto.RegisterType((*NewBuildRequest)(nil), "protobuf.NewBuildRequest")
	proto.RegisterType((*NextJobRequest)(nil), "protobuf.NextJobRequest")
	proto.RegisterType((*NextJobResponse)(nil), "protobuf.NextJobResponse")
	proto.RegisterType((*JobDoneRequest)(nil), "protobuf.JobDoneRequest")
	proto.RegisterType((*Build)(nil), "protobuf.Build")
	proto.RegisterType((*Project)(nil), "protobuf.Project")
	proto.RegisterType((*StandardRequest)(nil), "protobuf.StandardRequest")
	proto.RegisterType((*StandardResponse)(nil), "protobuf.StandardResponse")
	proto.RegisterType((*RequestHeader)(nil), "protobuf.RequestHeader")
	proto.RegisterType((*ResponseHeader)(nil), "protobuf.ResponseHeader")
	proto.RegisterType((*Error)(nil), "protobuf.Error")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DeploiServer service

type DeploiServerClient interface {
	RegisterNewBuild(ctx context.Context, in *NewBuildRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	GetNextJobs(ctx context.Context, in *NextJobRequest, opts ...grpc.CallOption) (*NextJobResponse, error)
	MarkJobDone(ctx context.Context, in *JobDoneRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	GetProjects(ctx context.Context, in *StandardRequest, opts ...grpc.CallOption) (*GetProjectsResponse, error)
	GetBuilds(ctx context.Context, in *GetBuildsRequest, opts ...grpc.CallOption) (*GetBuildsResponse, error)
	DeployBuild(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployResponse, error)
	AutomateDeployment(ctx context.Context, in *AutomationRequest, opts ...grpc.CallOption) (*AutomationResponse, error)
	RegisterEnvironment(ctx context.Context, in *RegisterEnvironmentRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	GetEnvironments(ctx context.Context, in *StandardRequest, opts ...grpc.CallOption) (*GetEnvironmentResponse, error)
	DeleteEnvironment(ctx context.Context, in *DeleteEnvironmentRequest, opts ...grpc.CallOption) (*StandardResponse, error)
}

type deploiServerClient struct {
	cc *grpc.ClientConn
}

func NewDeploiServerClient(cc *grpc.ClientConn) DeploiServerClient {
	return &deploiServerClient{cc}
}

func (c *deploiServerClient) RegisterNewBuild(ctx context.Context, in *NewBuildRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := grpc.Invoke(ctx, "/protobuf.DeploiServer/RegisterNewBuild", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploiServerClient) GetNextJobs(ctx context.Context, in *NextJobRequest, opts ...grpc.CallOption) (*NextJobResponse, error) {
	out := new(NextJobResponse)
	err := grpc.Invoke(ctx, "/protobuf.DeploiServer/GetNextJobs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploiServerClient) MarkJobDone(ctx context.Context, in *JobDoneRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := grpc.Invoke(ctx, "/protobuf.DeploiServer/MarkJobDone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploiServerClient) GetProjects(ctx context.Context, in *StandardRequest, opts ...grpc.CallOption) (*GetProjectsResponse, error) {
	out := new(GetProjectsResponse)
	err := grpc.Invoke(ctx, "/protobuf.DeploiServer/GetProjects", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploiServerClient) GetBuilds(ctx context.Context, in *GetBuildsRequest, opts ...grpc.CallOption) (*GetBuildsResponse, error) {
	out := new(GetBuildsResponse)
	err := grpc.Invoke(ctx, "/protobuf.DeploiServer/GetBuilds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploiServerClient) DeployBuild(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployResponse, error) {
	out := new(DeployResponse)
	err := grpc.Invoke(ctx, "/protobuf.DeploiServer/DeployBuild", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploiServerClient) AutomateDeployment(ctx context.Context, in *AutomationRequest, opts ...grpc.CallOption) (*AutomationResponse, error) {
	out := new(AutomationResponse)
	err := grpc.Invoke(ctx, "/protobuf.DeploiServer/AutomateDeployment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploiServerClient) RegisterEnvironment(ctx context.Context, in *RegisterEnvironmentRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := grpc.Invoke(ctx, "/protobuf.DeploiServer/RegisterEnvironment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploiServerClient) GetEnvironments(ctx context.Context, in *StandardRequest, opts ...grpc.CallOption) (*GetEnvironmentResponse, error) {
	out := new(GetEnvironmentResponse)
	err := grpc.Invoke(ctx, "/protobuf.DeploiServer/GetEnvironments", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploiServerClient) DeleteEnvironment(ctx context.Context, in *DeleteEnvironmentRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := grpc.Invoke(ctx, "/protobuf.DeploiServer/DeleteEnvironment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DeploiServer service

type DeploiServerServer interface {
	RegisterNewBuild(context.Context, *NewBuildRequest) (*StandardResponse, error)
	GetNextJobs(context.Context, *NextJobRequest) (*NextJobResponse, error)
	MarkJobDone(context.Context, *JobDoneRequest) (*StandardResponse, error)
	GetProjects(context.Context, *StandardRequest) (*GetProjectsResponse, error)
	GetBuilds(context.Context, *GetBuildsRequest) (*GetBuildsResponse, error)
	DeployBuild(context.Context, *DeployRequest) (*DeployResponse, error)
	AutomateDeployment(context.Context, *AutomationRequest) (*AutomationResponse, error)
	RegisterEnvironment(context.Context, *RegisterEnvironmentRequest) (*StandardResponse, error)
	GetEnvironments(context.Context, *StandardRequest) (*GetEnvironmentResponse, error)
	DeleteEnvironment(context.Context, *DeleteEnvironmentRequest) (*StandardResponse, error)
}

func RegisterDeploiServerServer(s *grpc.Server, srv DeploiServerServer) {
	s.RegisterService(&_DeploiServer_serviceDesc, srv)
}

func _DeploiServer_RegisterNewBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploiServerServer).RegisterNewBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.DeploiServer/RegisterNewBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploiServerServer).RegisterNewBuild(ctx, req.(*NewBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploiServer_GetNextJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploiServerServer).GetNextJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.DeploiServer/GetNextJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploiServerServer).GetNextJobs(ctx, req.(*NextJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploiServer_MarkJobDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobDoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploiServerServer).MarkJobDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.DeploiServer/MarkJobDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploiServerServer).MarkJobDone(ctx, req.(*JobDoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploiServer_GetProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StandardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploiServerServer).GetProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.DeploiServer/GetProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploiServerServer).GetProjects(ctx, req.(*StandardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploiServer_GetBuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuildsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploiServerServer).GetBuilds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.DeploiServer/GetBuilds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploiServerServer).GetBuilds(ctx, req.(*GetBuildsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploiServer_DeployBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploiServerServer).DeployBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.DeploiServer/DeployBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploiServerServer).DeployBuild(ctx, req.(*DeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploiServer_AutomateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutomationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploiServerServer).AutomateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.DeploiServer/AutomateDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploiServerServer).AutomateDeployment(ctx, req.(*AutomationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploiServer_RegisterEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploiServerServer).RegisterEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.DeploiServer/RegisterEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploiServerServer).RegisterEnvironment(ctx, req.(*RegisterEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploiServer_GetEnvironments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StandardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploiServerServer).GetEnvironments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.DeploiServer/GetEnvironments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploiServerServer).GetEnvironments(ctx, req.(*StandardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploiServer_DeleteEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploiServerServer).DeleteEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.DeploiServer/DeleteEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploiServerServer).DeleteEnvironment(ctx, req.(*DeleteEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeploiServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.DeploiServer",
	HandlerType: (*DeploiServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterNewBuild",
			Handler:    _DeploiServer_RegisterNewBuild_Handler,
		},
		{
			MethodName: "GetNextJobs",
			Handler:    _DeploiServer_GetNextJobs_Handler,
		},
		{
			MethodName: "MarkJobDone",
			Handler:    _DeploiServer_MarkJobDone_Handler,
		},
		{
			MethodName: "GetProjects",
			Handler:    _DeploiServer_GetProjects_Handler,
		},
		{
			MethodName: "GetBuilds",
			Handler:    _DeploiServer_GetBuilds_Handler,
		},
		{
			MethodName: "DeployBuild",
			Handler:    _DeploiServer_DeployBuild_Handler,
		},
		{
			MethodName: "AutomateDeployment",
			Handler:    _DeploiServer_AutomateDeployment_Handler,
		},
		{
			MethodName: "RegisterEnvironment",
			Handler:    _DeploiServer_RegisterEnvironment_Handler,
		},
		{
			MethodName: "GetEnvironments",
			Handler:    _DeploiServer_GetEnvironments_Handler,
		},
		{
			MethodName: "DeleteEnvironment",
			Handler:    _DeploiServer_DeleteEnvironment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}

func init() { proto.RegisterFile("server.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 945 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x5f, 0x53, 0xe4, 0x44,
	0x10, 0x27, 0x59, 0x76, 0x61, 0x7b, 0x61, 0x81, 0xb9, 0xd3, 0xcb, 0x45, 0xb4, 0xd6, 0x29, 0x4f,
	0x79, 0xc2, 0x2b, 0x2c, 0x4b, 0xf4, 0x0d, 0x6a, 0x01, 0x41, 0xa5, 0xce, 0xe0, 0x95, 0xfa, 0x98,
	0x64, 0x9b, 0x23, 0xb0, 0x9b, 0x59, 0x33, 0xb3, 0xe8, 0xbe, 0xab, 0x1f, 0xc1, 0xcf, 0xe0, 0xab,
	0xe5, 0x17, 0xb4, 0x66, 0xf2, 0x6f, 0x26, 0x1b, 0xb8, 0xab, 0x60, 0xd5, 0x3d, 0x65, 0xa6, 0xbb,
	0xf3, 0x9b, 0xee, 0x9e, 0xee, 0xdf, 0x34, 0xac, 0x71, 0x4c, 0x6e, 0x31, 0xd9, 0x9d, 0x26, 0x4c,
	0x30, 0xb2, 0xaa, 0x3e, 0xc1, 0xec, 0x92, 0xfe, 0x6b, 0x41, 0xeb, 0x8c, 0x05, 0xa4, 0x0f, 0x76,
	0x34, 0x72, 0xac, 0x81, 0xb5, 0xd3, 0xf5, 0xec, 0x68, 0x44, 0xbe, 0x80, 0x1e, 0xc6, 0xb7, 0x51,
	0xc2, 0xe2, 0x09, 0xc6, 0xc2, 0xb1, 0x07, 0xd6, 0x4e, 0x6f, 0xef, 0x9d, 0xdd, 0xfc, 0xbf, 0xdd,
	0xa3, 0x52, 0xe9, 0xe9, 0x96, 0xe4, 0x19, 0xb4, 0x83, 0x59, 0x34, 0x1e, 0x39, 0x2d, 0xf5, 0xcb,
	0x46, 0xf9, 0xcb, 0xa1, 0x14, 0x7b, 0xa9, 0x96, 0x6c, 0x43, 0x37, 0x4c, 0xd0, 0x17, 0x38, 0x3a,
	0x10, 0xce, 0xf2, 0xc0, 0xda, 0x69, 0x79, 0xa5, 0x80, 0x7c, 0x00, 0x70, 0x19, 0xc5, 0x11, 0xbf,
	0x52, 0xea, 0xb6, 0x52, 0x6b, 0x12, 0x7a, 0x00, 0x3d, 0xcd, 0x01, 0x42, 0x60, 0x39, 0xf6, 0x27,
	0x98, 0xb9, 0xaf, 0xd6, 0x12, 0x42, 0x7e, 0xf9, 0xd4, 0x0f, 0x91, 0x3b, 0xf6, 0xa0, 0xb5, 0xd3,
	0xf5, 0x34, 0x09, 0xfd, 0xd3, 0x02, 0xd7, 0xc3, 0x57, 0x11, 0x17, 0x98, 0xe8, 0xc1, 0xe0, 0x2f,
	0x33, 0xe4, 0x82, 0x7c, 0x0a, 0x9d, 0x2b, 0xf4, 0x47, 0x98, 0x28, 0xd0, 0xde, 0xde, 0x93, 0x32,
	0x8e, 0xcc, 0xe4, 0x6b, 0xa5, 0xf6, 0x32, 0xb3, 0xc6, 0x09, 0xa3, 0x7f, 0x58, 0xf0, 0xee, 0x09,
	0x0a, 0xc3, 0x07, 0x3e, 0x65, 0x31, 0x47, 0xf2, 0xbc, 0xe2, 0x84, 0xa3, 0x3b, 0x91, 0xda, 0x54,
	0xbc, 0xf8, 0x12, 0xd6, 0x34, 0xec, 0x34, 0xee, 0x3b, 0xdd, 0x30, 0x4c, 0xe9, 0xef, 0x16, 0x38,
	0x43, 0x1c, 0xa3, 0xc0, 0xb7, 0x9a, 0x8e, 0xbf, 0x6d, 0x58, 0x1f, 0xe2, 0x74, 0xcc, 0xe6, 0x8d,
	0xcf, 0x76, 0x60, 0x65, 0x9a, 0xb0, 0x6b, 0x0c, 0xd3, 0x73, 0xbb, 0x5e, 0xbe, 0x95, 0x1a, 0x55,
	0x7e, 0xa7, 0x69, 0x79, 0x76, 0xbd, 0x7c, 0x4b, 0x06, 0xa6, 0xbf, 0xcb, 0x4a, 0x6b, 0x14, 0xf6,
	0x36, 0x74, 0x8b, 0xf2, 0x51, 0x25, 0xd9, 0xf5, 0x4a, 0x01, 0xd9, 0x87, 0xf6, 0x65, 0x34, 0x46,
	0xee, 0x74, 0x54, 0xc6, 0x69, 0xe9, 0xa3, 0x11, 0xcc, 0xee, 0xb1, 0x34, 0x3a, 0x8a, 0x45, 0x32,
	0xf7, 0xd2, 0x1f, 0xdc, 0x7d, 0x80, 0x52, 0x48, 0x36, 0xa1, 0x75, 0x83, 0xf3, 0xac, 0x92, 0xe5,
	0x92, 0x3c, 0x86, 0xf6, 0xad, 0x3f, 0x9e, 0x61, 0x16, 0x4b, 0xba, 0xf9, 0xca, 0xde, 0xb7, 0xe8,
	0x4f, 0xd0, 0xcf, 0xc1, 0x1b, 0x17, 0xcc, 0x63, 0x68, 0x5f, 0xb3, 0xe0, 0x74, 0x94, 0xa3, 0xab,
	0x0d, 0x1d, 0xc2, 0xd6, 0xc1, 0x4c, 0xb0, 0x89, 0x2f, 0x22, 0x16, 0x37, 0xbd, 0x07, 0x7a, 0x0c,
	0x44, 0x47, 0x69, 0xea, 0x23, 0x0d, 0xe1, 0xd1, 0x09, 0x8a, 0x17, 0xe9, 0x1d, 0xf2, 0x07, 0x04,
	0xeb, 0xc2, 0x6a, 0x56, 0x09, 0x39, 0x23, 0x14, 0x7b, 0x8a, 0xb0, 0x79, 0x82, 0x42, 0x71, 0x14,
	0x6f, 0x5c, 0x79, 0x03, 0xe8, 0x65, 0x80, 0xe7, 0x92, 0x8f, 0xd2, 0x9c, 0xea, 0x22, 0x1a, 0xc3,
	0x96, 0x76, 0x4c, 0xe3, 0x48, 0x3e, 0x81, 0x8e, 0xaa, 0xdc, 0xbc, 0xc3, 0x17, 0x68, 0x36, 0x53,
	0xd3, 0x08, 0x36, 0xce, 0xf1, 0xd7, 0x54, 0xd6, 0x34, 0xaa, 0x82, 0xd2, 0xed, 0xfb, 0x28, 0x9d,
	0x86, 0xd0, 0x3f, 0xc7, 0xdf, 0xc4, 0x19, 0x0b, 0x1e, 0x92, 0xbf, 0x2a, 0x6b, 0x98, 0x5d, 0x48,
	0x2f, 0x65, 0x3c, 0xd9, 0x21, 0x8d, 0xb3, 0xf7, 0x21, 0x2c, 0x5f, 0xb3, 0x20, 0xcf, 0xdd, 0x7a,
	0x69, 0x2f, 0x61, 0x95, 0x8a, 0xfe, 0x08, 0xfd, 0x33, 0x16, 0x0c, 0x59, 0x8c, 0x8d, 0x83, 0xa9,
	0x6f, 0xad, 0x7f, 0x6c, 0x68, 0xab, 0xb4, 0x55, 0x8b, 0xc5, 0x5a, 0x28, 0x16, 0x9d, 0xae, 0x6c,
	0x93, 0xae, 0x5c, 0x58, 0x55, 0xcb, 0x97, 0xde, 0xb7, 0x19, 0x93, 0x15, 0x7b, 0xf2, 0x31, 0xf4,
	0xd5, 0xfa, 0x62, 0xce, 0x05, 0x4e, 0xa4, 0x45, 0xca, 0x66, 0x15, 0xa9, 0x7c, 0x21, 0x83, 0xc4,
	0x8f, 0xc3, 0x2b, 0x75, 0x7c, 0xca, 0x68, 0x9a, 0xc4, 0x7c, 0xa2, 0x3b, 0xd5, 0x27, 0xfa, 0x79,
	0x4e, 0x78, 0x2b, 0x2a, 0x89, 0x6e, 0xa5, 0x28, 0xfe, 0x57, 0xa2, 0xfb, 0x01, 0x56, 0xb2, 0xee,
	0x7f, 0x83, 0xa4, 0xbd, 0x71, 0x6b, 0x1c, 0xc2, 0xc6, 0x85, 0xf0, 0xe3, 0x91, 0x9f, 0x34, 0x6e,
	0x0d, 0x3a, 0x84, 0xcd, 0x12, 0xa3, 0x31, 0xc1, 0x3d, 0x83, 0x75, 0x03, 0x5e, 0xa6, 0x42, 0xb0,
	0x1b, 0x8c, 0xb3, 0xf8, 0xd2, 0x0d, 0xbd, 0x80, 0xbe, 0x09, 0x20, 0x0b, 0x84, 0xcf, 0xc2, 0x10,
	0x39, 0x57, 0x96, 0xab, 0x5e, 0xbe, 0x95, 0x59, 0xc0, 0x24, 0x61, 0x49, 0x4d, 0x16, 0x8e, 0xa4,
	0xdc, 0xcb, 0xd4, 0xf4, 0x73, 0x68, 0x2b, 0x81, 0x1c, 0xa2, 0x42, 0x36, 0x2a, 0x86, 0x28, 0xb9,
	0x96, 0xf8, 0x13, 0xe4, 0xdc, 0x7f, 0x95, 0x5f, 0x4a, 0xbe, 0xdd, 0xfb, 0xab, 0x03, 0x6b, 0xea,
	0xf1, 0x89, 0x2e, 0xd4, 0x60, 0x49, 0xbe, 0x81, 0xcd, 0x7c, 0x9c, 0xca, 0x09, 0x87, 0x3c, 0x2d,
	0x0f, 0xad, 0x90, 0x90, 0xab, 0xd5, 0x4b, 0x35, 0x81, 0x74, 0x89, 0x0c, 0xa1, 0x77, 0x82, 0x22,
	0x6b, 0x74, 0x4e, 0x1c, 0x1d, 0x47, 0x67, 0x18, 0xf7, 0x69, 0x8d, 0xa6, 0x40, 0x39, 0x82, 0xde,
	0x77, 0x7e, 0x72, 0x93, 0xf5, 0xb1, 0x8e, 0x62, 0xb6, 0xf6, 0x6b, 0x9c, 0x39, 0x55, 0xce, 0xe4,
	0xcf, 0x8f, 0x1e, 0x54, 0xa5, 0x7c, 0xdc, 0xf7, 0x4b, 0x55, 0xcd, 0x83, 0x45, 0x97, 0xc8, 0x31,
	0x74, 0x0b, 0xf6, 0x27, 0xae, 0x61, 0x6d, 0xbc, 0x3c, 0xee, 0x7b, 0xb5, 0xba, 0x02, 0xe7, 0x10,
	0x7a, 0xe9, 0xcb, 0x9f, 0xe6, 0xf9, 0xc9, 0x1d, 0xd3, 0x86, 0xeb, 0x2c, 0x2a, 0x0a, 0x8c, 0xef,
	0x8b, 0xd7, 0x19, 0x53, 0x9d, 0x9a, 0x72, 0xb4, 0x83, 0x17, 0x26, 0x00, 0x77, 0xbb, 0x5e, 0x59,
	0x40, 0xfe, 0x0c, 0x8f, 0x6a, 0x46, 0x6a, 0xf2, 0x91, 0xde, 0x00, 0x77, 0x4d, 0xdc, 0xaf, 0xb9,
	0x84, 0x17, 0xb0, 0x61, 0x0e, 0xc9, 0xf7, 0x5e, 0xc4, 0xc0, 0x48, 0x5f, 0xcd, 0x68, 0x4d, 0x97,
	0xc8, 0x4b, 0xd8, 0x5a, 0x18, 0x77, 0x89, 0x31, 0xb7, 0xd5, 0xcf, 0xc2, 0xf7, 0x3b, 0x1a, 0x74,
	0x94, 0xf2, 0xb3, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x0b, 0xb9, 0xce, 0x73, 0x71, 0x0d, 0x00,
	0x00,
}
